declarefunctions(intf) ::=
<<
<intf.functions.values:{x | <intf.shortname><x.name>(<x.param>) <x.rettype> }; separator="\n">
>>

implementtransaction(ns, func) ::=
<<
func (t *ShimHandler) <ns><func.name>Wrapper(params []byte) ([]byte, error) {
     t.transactions.<ns><func.name>(params)
}

>>

implementtransactions(intf) ::=
<<
<intf.functions.values:{x | <implementtransaction(intf.shortname, x)> }>     
>>

golang(transactions, queries) ::=
<<
/* Generated by obcc.  DO NOT EDIT */

package obccshim

import (
	"errors"
	"fmt"
	"strconv"

	"github.com/openblockchain/obc-peer/openchain/chaincode/shim"
)

type Transactions interface {
     <transactions.values:{intf | <declarefunctions(intf)> }>
}

type Queries interface {
     <queries.values:{intf | <declarefunctions(intf)> }>
}

type ShimHandler struct {
     transactions Transactions
     queries      Queries
}

<transactions.values:{intf | <implementtransactions(intf)> }>


// Run callback representing the invocation of a chaincode
func (t *ShimHandler) Run(stub *shim.ChaincodeStub, intf string, function int32, params []byte) ([]byte, error) {

	// Handle different functions

	return nil, errors.New("Received unknown function invocation")
}

// Query callback representing the query of a chaincode
func (t *ShimHandler) Query(stub *shim.ChaincodeStub, intf string, function int32, params []byte) ([]byte, error) {

	return nil, errors.New("Invalid query")
}

>>
