primary(provides) ::=
<<
<!
!-------------------------------------------------------------------------------------------------
! primary - main entry point for golang generator
!-------------------------------------------------------------------------------------------------
!
! This template is responsible for generating the primary golang shim that bridges between the
! Hyperledger fabric and chaincode.
!
!-------------------------------------------------------------------------------------------------
!>
/* Generated by chaintool.  DO NOT EDIT */

package ccs

import (
       	"errors"

        <provides.values:{intf | "<intf.packagepath>" }; separator="\n">

	"github.com/hyperledger/fabric/core/chaincode/shim"
)

type ShimHandler struct {
     <provides.values:{intf | <intf.packageCamel> <intf.package>.CCInterface }; separator="\n">
}

// Initialization function, called only once
func (t *ShimHandler) Init(stub *shim.ChaincodeStub, function string, args []string) ([]byte, error) {

	if len(args) != 1 {
		return nil, errors.New("Expected exactly one argument")
	}

        if function != "init" {
               return nil, errors.New("Function must be \"init\"")
        }

        return appinit.InitStub(stub, t.Appinit, args[0])
}

// Callback representing the invocation of a chaincode
func (t *ShimHandler) Invoke(stub *shim.ChaincodeStub, function string, args []string) ([]byte, error) {

	if len(args) != 1 {
		return nil, errors.New("Expected exactly one argument")
	}

        // Handle different functions
        switch {
        <provides.values:{intf | <dispatchfunctions(true, intf, intf.transactions)> }; separator="\n">
        default:
                return nil, errors.New("Received unknown function invocation")
        }
}

// Callback representing the query of a chaincode
func (t *ShimHandler) Query(stub *shim.ChaincodeStub, function string, args []string) ([]byte, error) {

	if len(args) != 1 {
		return nil, errors.New("Expected exactly one argument")
	}

        switch {
        <provides.values:{intf | <dispatchfunctions(false, intf, intf.queries)> }; separator="\n">
        default:
                return nil, errors.New("Invalid query")
        }
}

func Start(handler *ShimHandler) error {

       err := shim.Start(handler)
       if err != nil {
               return err
       }

       return nil
}
<!
!-------------------------------------------------------------------------------------------------
! end of primary template.
!-------------------------------------------------------------------------------------------------
!>
>>

server(intf) ::=
<<
<!
!-------------------------------------------------------------------------------------------------
! server
!-------------------------------------------------------------------------------------------------
!
! This template is responsible for generating the interface-specific golang provider shim
!
!-------------------------------------------------------------------------------------------------
!>
/* Generated by chaintool.  DO NOT EDIT */

package <intf.package>

import (
	proto "github.com/golang/protobuf/jsonpb"
	"github.com/hyperledger/fabric/core/chaincode/shim"
)

type CCInterface interface {
     <declarefunctions(intf, intf.transactions)>
     <declarefunctions(intf, intf.queries)>
}

/* Server stubs */
<implementservers(intf, intf.transactions)>
<implementservers(intf, intf.queries)>

<!
!-------------------------------------------------------------------------------------------------
! end of server template.
!-------------------------------------------------------------------------------------------------
!>
>>

client(intf) ::=
<<
<!
!-------------------------------------------------------------------------------------------------
! client
!-------------------------------------------------------------------------------------------------
!
! This template is responsible for generating the interface-specific golang consumer shim
!
!-------------------------------------------------------------------------------------------------
!>
/* Generated by chaintool.  DO NOT EDIT */

package <intf.package>

import (
	proto "github.com/golang/protobuf/jsonpb"
	"github.com/hyperledger/fabric/core/chaincode/shim"
)

/* Client stubs */
<implementclients(true, intf, intf.transactions)>
<implementclients(false, intf, intf.queries)>

<!
!-------------------------------------------------------------------------------------------------
! end of client template.
!-------------------------------------------------------------------------------------------------
!>
>>

compositename(txn, intf, func)          ::= "\"<intf.name>/<if(txn)>txn<else>query<endif>/<func.index>\""
implementservers(intf, functions)  ::= "<functions.values:{x | <implementserver(intf, x)> }; separator=\"\n\">"
implementclients(txn, intf, functions)  ::= "<functions.values:{x | <implementclient(txn, intf, x)> }; separator=\"\n\">"
dispatchfunctions(txn, intf, functions) ::= "<functions.values:{x | <dispatchfunction(txn, intf, x)> }; separator=\"\n\">"

declarefunctions(intf, functions) ::=
<<
<functions.values:{x | <x.name>(*shim.ChaincodeStub, *<x.param>) <if(x.rettype)>(*<x.rettype>, error)<else>error<endif> }; separator="\n">
>>

dispatchfunction(txn, intf, func) ::=
<<
case function == <compositename(txn, intf, func)>:
     return <intf.package>.<func.name>Stub(stub, t.<intf.packageCamel>, args[0])
>>

implementserver(intf, func) ::=
<<

func <func.name>Stub(stub *shim.ChaincodeStub, intf CCInterface, _params string) ([]byte, error) {

     params := &<func.param>{}
     err := proto.UnmarshalString(_params, params)
     if (err != nil) {
        return nil, err
     }

     <if(func.rettype)>result, err := <else>err = <endif>intf.<func.name>(stub, params)
     if (err != nil) {
        return nil, err
     }

     <if(func.rettype)>
     marshaler := &proto.Marshaler{}
     _result, err := marshaler.MarshalToString(result)
     if (err != nil) {
          return nil, err
     }
     return []byte(_result), nil
     <else>
     return nil, nil
     <endif>
}

>>

implementclient(txn, intf, func) ::=
<<

func <func.name>(stub *shim.ChaincodeStub, chaincodeName string, params *<func.param>) <\\>
<if(func.rettype)>(*<func.rettype>, error)<else>error<endif> {

     marshaler := &proto.Marshaler{}
     args := make([]string, 1)
     var err error

     args[0], err = marshaler.MarshalToString(params)
     if (err != nil) {
        return <if(func.rettype)>nil, <endif>err
     }

     <if(func.rettype)>_result, err :=<else>_, err =<endif> stub.<if(txn)>Invoke<else>Query<endif>Chaincode(chaincodeName, <compositename(txn, intf, func)>, args)

     <if(func.rettype)>
     result := &<func.rettype>{}
     err = proto.UnmarshalString(string(_result), result)
     if (err != nil) {
          return nil, err
     }
     return result, nil
     <else>
     return err
     <endif>
}

>>

